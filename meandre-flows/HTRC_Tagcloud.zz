#
# Generated by RDF2ZZConverter v1.4.11.8693M on Sat Mar 21 21:55:29 CDT 2015
#
# @name 	HTRC_Tagcloud
# @description 	<br>
# @creator 	admin
# @date 	Tue Aug 27 20:32:32 CDT 2013
# @rights 	UIUC/NCSA Open Source License
# @tags 	tagcloud, htrc
# @uri  	meandre://htrc.illinois.edu/flows/htrc_tagcloud/
#

#
# Specify component imports
#
# TODO: Add component import statement(s) here
# Example: import <URL>   (replace 'URL' with the correct location)
import <http://dev5.informatics.illinois.edu:1714/public/services/repository.ttl>

#
# Create the component aliases
#
alias <meandre://seasr.org/components/foundry/fork-x2> as FORK_X2
alias <meandre://seasr.org/components/foundry/csv-to-tuple> as CSV_TO_TUPLE
alias <meandre://seasr.org/components/foundry/opennlp-tokenizer> as OPENNLP_TOKENIZER
alias <meandre://seasr.org/components/foundry/token-counts-to-csv> as TOKEN_COUNTS_TO_CSV
alias <meandre://seasr.org/components/foundry/tuple-value-to-string> as TUPLE_VALUE_TO_STRING
alias <meandre://seasr.org/components/foundry/token-counter-reducer> as TOKEN_COUNTER_REDUCER
alias <meandre://seasr.org/components/foundry/top-n-filter> as TOP_N_FILTER
alias <meandre://seasr.org/components/foundry/token-counter> as TOKEN_COUNTER
alias <meandre://seasr.org/components/foundry/search-text> as SEARCH_TEXT
alias <meandre://seasr.org/components/foundry/text-cleaner> as TEXT_CLEANER
alias <meandre://seasr.org/components/foundry/write-to-file> as WRITE_TO_FILE
alias <meandre://seasr.org/components/foundry/tag-cloud> as TAG_CLOUD
alias <meandre://seasr.org/components/foundry/strings-to-java-string> as STRINGS_TO_JAVA_STRING
alias <meandre://seasr.org/components/foundry/push-text> as PUSH_TEXT
alias <meandre://seasr.org/components/foundry/flow-parameter> as FLOW_PARAMETER
alias <meandre://seasr.org/components/foundry/random-sample> as RANDOM_SAMPLE
alias <meandre://seasr.org/components/htrc/htrc-page-retriever> as HTRC_PAGE_RETRIEVER
alias <meandre://seasr.org/components/foundry/read-text> as READ_TEXT
alias <meandre://seasr.org/components/foundry/stream-delimiter-filter> as STREAM_DELIMITER_FILTER

#
# Create the component instances
#
token_counts_to_csv = TOKEN_COUNTS_TO_CSV()
fork_x2 = FORK_X2()
htrc_page_retriever = HTRC_PAGE_RETRIEVER()
csv_to_tuple = CSV_TO_TUPLE()
search_text = SEARCH_TEXT()
text_cleaner = TEXT_CLEANER()
stream_delimiter_filter = STREAM_DELIMITER_FILTER()
tuple_value_to_string = TUPLE_VALUE_TO_STRING()
push_text = PUSH_TEXT()
top_n_filter = TOP_N_FILTER()
push_text_2 = PUSH_TEXT()
write_to_file = WRITE_TO_FILE()
write_to_file_2 = WRITE_TO_FILE()
tag_cloud = TAG_CLOUD()
token_counter_reducer = TOKEN_COUNTER_REDUCER()
flow_parameter = FLOW_PARAMETER()
opennlp_tokenizer = OPENNLP_TOKENIZER()
read_text = READ_TEXT()
strings_to_java_string = STRINGS_TO_JAVA_STRING()
token_counter = TOKEN_COUNTER()
random_sample = RANDOM_SAMPLE()

#
# Set component properties
#
token_counts_to_csv.ordered = "true"
token_counts_to_csv._debug_level = "info"
token_counts_to_csv.header = "tokens,counts"
token_counts_to_csv._ignore_errors = "false"

fork_x2.replication_mode = "0"
fork_x2.replication_method_name = ""
fork_x2._debug_level = "info"
fork_x2._ignore_errors = "false"

htrc_page_retriever.delimiter = "|"
htrc_page_retriever.wrap_stream = "false"
htrc_page_retriever.read_timeout = "0"
htrc_page_retriever.stream_per_volume = "false"
htrc_page_retriever._ignore_errors = "false"
htrc_page_retriever.auth_selfsign = "false"
htrc_page_retriever.auth_token = "a6fa7057bfa0e5a9a33411e41ca9bc69"
htrc_page_retriever._stream_id = "99"
htrc_page_retriever.data_api_url = "https://sandbox.htrc.illinois.edu:25443/data-api"
htrc_page_retriever.connection_timeout = "0"
htrc_page_retriever._debug_level = "info"

csv_to_tuple._debug_level = "info"
csv_to_tuple.labels = "volume_id"
csv_to_tuple._ignore_errors = "false"
csv_to_tuple.header = "false"

search_text._debug_level = "info"
search_text._stream_id = "1"
search_text.expression = "(?:[^|]+\\|?){1,4}"
search_text.wrap_stream = "true"
search_text._ignore_errors = "false"

text_cleaner.replace4 = ""
text_cleaner.replace3 = ""
text_cleaner.replace2 = ""
text_cleaner.replace = "|"
text_cleaner._ignore_errors = "false"
text_cleaner.find = "\\n"
text_cleaner.find4 = ""
text_cleaner.find3 = ""
text_cleaner.find2 = ""
text_cleaner._debug_level = "info"

stream_delimiter_filter.advanced_filter = ""
stream_delimiter_filter._debug_level = "info"
stream_delimiter_filter._stream_id = ""
stream_delimiter_filter._ignore_errors = "false"

tuple_value_to_string._debug_level = "info"
tuple_value_to_string.attribute = "volume_id"
tuple_value_to_string._ignore_errors = "false"

push_text._debug_level = "info"
push_text.message = "tagcloudtokencounts.html"
push_text._ignore_errors = "false"

top_n_filter.ordered = "true"
top_n_filter._debug_level = "info"
top_n_filter.bottom_n = "false"
top_n_filter.n_top_tokens = "200"
top_n_filter._ignore_errors = "false"

push_text_2._debug_level = "info"
push_text_2.message = "tagcloudtokencounts.csv"
push_text_2._ignore_errors = "false"

write_to_file._debug_level = "info"
write_to_file.append_timestamp = "false"
write_to_file.append_data_to_file = "false"
write_to_file._ignore_errors = "false"
write_to_file.default_folder = "/tmp"

write_to_file_2._debug_level = "info"
write_to_file_2.append_timestamp = "false"
write_to_file_2.append_data_to_file = "false"
write_to_file_2._ignore_errors = "false"
write_to_file_2.default_folder = "/tmp"

tag_cloud.show_tooltip = "true"
tag_cloud.d3_api_url = "http://d3js.org/d3.v2.min.js"
tag_cloud.max_size = "150"
tag_cloud.show_counts = "false"
tag_cloud.force_positive = "true"
tag_cloud._ignore_errors = "false"
tag_cloud.d3_cloud_api_url = "http://www.jasondavies.com/wordcloud/d3.layout.cloud.js"
tag_cloud.properties = ""
tag_cloud.css = ""
tag_cloud._debug_level = "info"
tag_cloud.height = "1000"
tag_cloud.width = "1000"
tag_cloud.font_name = ""
tag_cloud.color_palette = "category20"
tag_cloud.min_size = "20"
tag_cloud.template = "org/seasr/meandre/components/vis/d3/TagCloud.vm"
tag_cloud.scale = "log"
tag_cloud.title = "Tag Cloud"

token_counter_reducer.ordered = "true"
token_counter_reducer._debug_level = "info"
token_counter_reducer._stream_id = "1"
token_counter_reducer._ignore_errors = "false"

flow_parameter.default_value = "/home/lauvil/HTRC/data/volume_id.txt"
flow_parameter._debug_level = "info"
flow_parameter.param_name = "volume_id"
flow_parameter._stream_id = "99"
flow_parameter.wrap_stream = "false"
flow_parameter._ignore_errors = "false"

opennlp_tokenizer.tokenizer_type = "simple"
opennlp_tokenizer._debug_level = "info"
opennlp_tokenizer._ignore_errors = "false"

read_text.retry_on_timeout = "true"
read_text.read_timeout = "0"
read_text.max_attempts = "1"
read_text._ignore_errors = "false"
read_text.retry_on_http_error = "0"
read_text.retry_delay = "1000"
read_text.connection_timeout = "0"
read_text._debug_level = "info"

strings_to_java_string._debug_level = "info"
strings_to_java_string.separator = "\\n"
strings_to_java_string._ignore_errors = "false"

token_counter.ordered = "true"
token_counter._debug_level = "info"
token_counter._ignore_errors = "false"

random_sample.seed = "123"
random_sample._debug_level = "info"
random_sample.count = "10"
random_sample._ignore_errors = "false"

#
# Create the flow by connecting the components
#
@flow_parameter_outputs = flow_parameter()
@push_text_2_outputs = push_text_2()
@token_counts_to_csv_outputs = token_counts_to_csv()
@random_sample_outputs = random_sample()
@tag_cloud_outputs = tag_cloud()
@fork_x2_outputs = fork_x2()
@text_cleaner_outputs = text_cleaner()
@token_counter_outputs = token_counter() [+AUTO!]
@stream_delimiter_filter_outputs = stream_delimiter_filter()
@strings_to_java_string_outputs = strings_to_java_string()
@read_text_outputs = read_text()
@token_counter_reducer_outputs = token_counter_reducer()
@htrc_page_retriever_outputs = htrc_page_retriever()
@top_n_filter_outputs = top_n_filter()
@tuple_value_to_string_outputs = tuple_value_to_string()
@opennlp_tokenizer_outputs = opennlp_tokenizer() [+AUTO!]
@csv_to_tuple_outputs = csv_to_tuple()
@push_text_outputs = push_text()
@search_text_outputs = search_text()

write_to_file_2(
	location: push_text_2_outputs.text;
	data: token_counts_to_csv_outputs.text
)
token_counts_to_csv(token_counts: fork_x2_outputs.object2)
random_sample(text: strings_to_java_string_outputs.java_string)
tag_cloud(token_counts: fork_x2_outputs.object)
fork_x2(object: top_n_filter_outputs.token_counts)
text_cleaner(text: random_sample_outputs.text)
write_to_file(
	data: tag_cloud_outputs.html;
	location: push_text_outputs.text
)
token_counter(tokens: opennlp_tokenizer_outputs.tokens)
stream_delimiter_filter(object: token_counter_reducer_outputs.token_counts)
strings_to_java_string(text: tuple_value_to_string_outputs.text)
read_text(location: flow_parameter_outputs.text)
token_counter_reducer(token_counts: token_counter_outputs.token_counts)
htrc_page_retriever(volume_id_list: search_text_outputs.text_found)
top_n_filter(token_counts: stream_delimiter_filter_outputs.object)
tuple_value_to_string(
	meta_tuple: csv_to_tuple_outputs.meta_tuple;
	tuples: csv_to_tuple_outputs.tuples
)
opennlp_tokenizer(text: htrc_page_retriever_outputs.text)
csv_to_tuple(text: read_text_outputs.text)
search_text(text: text_cleaner_outputs.text)

