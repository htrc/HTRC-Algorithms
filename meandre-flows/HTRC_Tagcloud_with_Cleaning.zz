#
# Generated by RDF2ZZConverter v1.4.11.8693M on Sat Mar 21 22:44:43 CDT 2015
#
# @name 	HTRC_Tagcloud_with_Cleaning
# @description 	<br>
# @creator 	admin
# @date 	Thu Feb 19 14:33:42 CST 2015
# @rights 	UIUC/NCSA Open Source License
# @tags 	tagcloud, htrc
# @uri  	meandre://htrc.illinois.edu/flows/htrc_tagcloud_with_cleaning/
#

#
# Specify component imports
#
# TODO: Add component import statement(s) here
# Example: import <URL>   (replace 'URL' with the correct location)
import <http://dev5.informatics.illinois.edu:1714/public/services/repository.ttl>
#
# Create the component aliases
#
alias <meandre://seasr.org/components/foundry/fork-x2> as FORK_X2
alias <meandre://seasr.org/components/foundry/csv-to-tuple> as CSV_TO_TUPLE
alias <meandre://seasr.org/components/foundry/token-counts-to-csv> as TOKEN_COUNTS_TO_CSV
alias <meandre://seasr.org/components/foundry/concatenate-text> as CONCATENATE_TEXT
alias <meandre://seasr.org/components/foundry/top-n-filter> as TOP_N_FILTER
alias <meandre://seasr.org/components/foundry/text-cleaner> as TEXT_CLEANER
alias <meandre://seasr.org/components/foundry/write-to-file> as WRITE_TO_FILE
alias <meandre://seasr.org/components/foundry/text-replacement> as TEXT_REPLACEMENT
alias <meandre://seasr.org/components/foundry/tag-cloud> as TAG_CLOUD
alias <meandre://seasr.org/components/foundry/read-text> as READ_TEXT
alias <meandre://seasr.org/components/foundry/to-lowercase> as TO_LOWERCASE
alias <meandre://seasr.org/components/foundry/universal-text-extractor> as UNIVERSAL_TEXT_EXTRACTOR
alias <meandre://seasr.org/components/foundry/opennlp-tokenizer> as OPENNLP_TOKENIZER
alias <meandre://seasr.org/components/foundry/token-filter> as TOKEN_FILTER
alias <meandre://seasr.org/components/foundry/tuple-value-to-string> as TUPLE_VALUE_TO_STRING
alias <meandre://seasr.org/components/foundry/token-counter-reducer> as TOKEN_COUNTER_REDUCER
alias <meandre://seasr.org/components/foundry/token-counter> as TOKEN_COUNTER
alias <meandre://seasr.org/components/foundry/search-text> as SEARCH_TEXT
alias <meandre://seasr.org/components/foundry/strings-to-java-string> as STRINGS_TO_JAVA_STRING
alias <meandre://seasr.org/components/foundry/text-accumulator> as TEXT_ACCUMULATOR
alias <meandre://seasr.org/components/foundry/push-text> as PUSH_TEXT
alias <meandre://seasr.org/components/foundry/random-sample> as RANDOM_SAMPLE
alias <meandre://seasr.org/components/foundry/flow-parameter> as FLOW_PARAMETER
alias <meandre://seasr.org/components/htrc/htrc-page-retriever> as HTRC_PAGE_RETRIEVER
alias <meandre://seasr.org/components/foundry/stream-delimiter-filter> as STREAM_DELIMITER_FILTER
alias <meandre://seasr.org/components/foundry/trigger-message> as TRIGGER_MESSAGE

#
# Create the component instances
#
tag_cloud = TAG_CLOUD()
text_cleaner = TEXT_CLEANER()
push_text_3 = PUSH_TEXT()
universal_text_extractor_3 = UNIVERSAL_TEXT_EXTRACTOR()
token_counter = TOKEN_COUNTER()
push_text_2 = PUSH_TEXT()
random_sample = RANDOM_SAMPLE()
concatenate_text = CONCATENATE_TEXT()
token_counter_reducer = TOKEN_COUNTER_REDUCER()
text_accumulator = TEXT_ACCUMULATOR()
tuple_value_to_string = TUPLE_VALUE_TO_STRING()
to_lowercase = TO_LOWERCASE()
fork_x2 = FORK_X2()
search_text = SEARCH_TEXT()
csv_to_tuple = CSV_TO_TUPLE()
htrc_page_retriever = HTRC_PAGE_RETRIEVER()
strings_to_java_string = STRINGS_TO_JAVA_STRING()
token_filter = TOKEN_FILTER()
read_text = READ_TEXT()
push_text = PUSH_TEXT()
top_n_filter = TOP_N_FILTER()
text_cleaner_2 = TEXT_CLEANER()
write_to_file_2 = WRITE_TO_FILE()
stream_delimiter_filter = STREAM_DELIMITER_FILTER()
universal_text_extractor_2 = UNIVERSAL_TEXT_EXTRACTOR()
trigger_message = TRIGGER_MESSAGE()
text_replacement = TEXT_REPLACEMENT()
opennlp_tokenizer = OPENNLP_TOKENIZER()
stream_delimiter_filter_2 = STREAM_DELIMITER_FILTER()
flow_parameter = FLOW_PARAMETER()
flow_parameter_2 = FLOW_PARAMETER()
token_counts_to_csv = TOKEN_COUNTS_TO_CSV()
flow_parameter_3 = FLOW_PARAMETER()
opennlp_tokenizer_2 = OPENNLP_TOKENIZER()
write_to_file_3 = WRITE_TO_FILE()

#
# Set component properties
#
tag_cloud.show_tooltip = "true"
tag_cloud.d3_api_url = "http://d3js.org/d3.v2.min.js"
tag_cloud._ignore_errors = "false"
tag_cloud.max_size = "150"
tag_cloud.show_counts = "false"
tag_cloud.force_positive = "true"
tag_cloud.d3_cloud_api_url = "http://www.jasondavies.com/wordcloud/d3.layout.cloud.js"
tag_cloud.properties = ""
tag_cloud.css = ""
tag_cloud._debug_level = "info"
tag_cloud.height = "1000"
tag_cloud.width = "1000"
tag_cloud.font_name = ""
tag_cloud.color_palette = "category20"
tag_cloud.min_size = "20"
tag_cloud.template = "org/seasr/meandre/components/vis/d3/TagCloud.vm"
tag_cloud.scale = "log"
tag_cloud.title = "Tag Cloud"

text_cleaner.replace4 = ""
text_cleaner.replace3 = ""
text_cleaner.replace2 = ""
text_cleaner.replace = "|"
text_cleaner._ignore_errors = "false"
text_cleaner.find = "\\n"
text_cleaner.find4 = ""
text_cleaner.find3 = ""
text_cleaner.find2 = ""
text_cleaner._debug_level = "info"

push_text_3._debug_level = "info"
push_text_3.message = "tagcloudcleantokencounts.csv"
push_text_3._ignore_errors = "false"

universal_text_extractor_3._debug_level = "info"
universal_text_extractor_3.read_timeout = "0"
universal_text_extractor_3.connection_timeout = "0"
universal_text_extractor_3._ignore_errors = "false"

token_counter.ordered = "false"
token_counter._debug_level = "info"
token_counter._ignore_errors = "false"

push_text_2._debug_level = "info"
push_text_2.message = "tagcloudcleantokencounts.html"
push_text_2._ignore_errors = "false"

random_sample.seed = "123"
random_sample._debug_level = "info"
random_sample.count = "10"
random_sample._ignore_errors = "false"

concatenate_text._debug_level = "info"
concatenate_text.separator = " "
concatenate_text._ignore_errors = "false"

token_counter_reducer.ordered = "true"
token_counter_reducer._debug_level = "info"
token_counter_reducer._stream_id = "1"
token_counter_reducer._ignore_errors = "false"

text_accumulator._debug_level = "info"
text_accumulator.separator = " "
text_accumulator._stream_id = "2"
text_accumulator._ignore_errors = "false"

tuple_value_to_string._debug_level = "info"
tuple_value_to_string.attribute = "volume_id"
tuple_value_to_string._ignore_errors = "false"

to_lowercase._debug_level = "info"
to_lowercase._ignore_errors = "false"

fork_x2.replication_mode = "0"
fork_x2.replication_method_name = ""
fork_x2._debug_level = "info"
fork_x2._ignore_errors = "false"

search_text._debug_level = "info"
search_text._stream_id = "1"
search_text.expression = "(?:[^|]+\\|?){1,4}"
search_text.wrap_stream = "true"
search_text._ignore_errors = "false"

csv_to_tuple._debug_level = "info"
csv_to_tuple.header = "false"
csv_to_tuple._ignore_errors = "false"
csv_to_tuple.labels = "volume_id"

htrc_page_retriever.delimiter = "|"
htrc_page_retriever.wrap_stream = "true"
htrc_page_retriever.read_timeout = "0"
htrc_page_retriever.stream_per_volume = "true"
htrc_page_retriever._ignore_errors = "false"
htrc_page_retriever.auth_selfsign = "false"
htrc_page_retriever.auth_token = "601d2ee4955da613f9f0b6f98d92c57a"
htrc_page_retriever._stream_id = "2"
htrc_page_retriever.data_api_url = "https://sandbox.htrc.illinois.edu:25443/data-api"
htrc_page_retriever.connection_timeout = "0"
htrc_page_retriever._debug_level = "info"

strings_to_java_string._debug_level = "info"
strings_to_java_string.separator = "\\n"
strings_to_java_string._ignore_errors = "false"

token_filter.ignore_case = "true"
token_filter._debug_level = "info"
token_filter.replace = "true"
token_filter._ignore_errors = "false"

read_text.retry_on_timeout = "true"
read_text.read_timeout = "0"
read_text.max_attempts = "1"
read_text._ignore_errors = "false"
read_text.retry_on_http_error = "0"
read_text.retry_delay = "1000"
read_text._debug_level = "info"
read_text.connection_timeout = "0"

push_text._debug_level = "info"
push_text.message = ", . ; : ? { } [ ] ( ) | - _ / \\\\ $ ! ' ` -- \\u201D \\u2019 \\\" ~ @ # % ^ & * + = \\u2014"
push_text._ignore_errors = "false"

top_n_filter.ordered = "true"
top_n_filter._debug_level = "info"
top_n_filter.bottom_n = "false"
top_n_filter._ignore_errors = "false"
top_n_filter.n_top_tokens = "200"

text_cleaner_2.replace4 = ""
text_cleaner_2.replace3 = ""
text_cleaner_2.replace2 = ""
text_cleaner_2.replace = ""
text_cleaner_2._ignore_errors = "false"
text_cleaner_2.find4 = "[^\\p{L}\\p{Z}\\p{S}\\p{N}\\p{P}]"
text_cleaner_2.find = "^(.*)\\s"
text_cleaner_2.find3 = "(?m)--?\\s*$\\s*"
text_cleaner_2.find2 = "(.*)$"
text_cleaner_2._debug_level = "info"

write_to_file_2._debug_level = "info"
write_to_file_2.append_timestamp = "false"
write_to_file_2.append_data_to_file = "false"
write_to_file_2._ignore_errors = "false"
write_to_file_2.default_folder = "/tmp"

stream_delimiter_filter.advanced_filter = ""
stream_delimiter_filter._debug_level = "info"
stream_delimiter_filter._stream_id = "2"
stream_delimiter_filter._ignore_errors = "false"

universal_text_extractor_2._debug_level = "info"
universal_text_extractor_2.read_timeout = "0"
universal_text_extractor_2.connection_timeout = "0"
universal_text_extractor_2._ignore_errors = "false"

trigger_message.reset_on_push = "false"
trigger_message._debug_level = "info"
trigger_message._stream_id = "-1"
trigger_message._ignore_errors = "false"

text_replacement._debug_level = "info"
text_replacement.ignoreCase = "true"
text_replacement._ignore_errors = "false"

opennlp_tokenizer.tokenizer_type = "simple"
opennlp_tokenizer._debug_level = "info"
opennlp_tokenizer._ignore_errors = "false"

stream_delimiter_filter_2._debug_level = "info"
stream_delimiter_filter_2.advanced_filter = ""
stream_delimiter_filter_2._stream_id = ""
stream_delimiter_filter_2._ignore_errors = "false"

flow_parameter.default_value = "/home/lauvil/HTRC/data/volume_id.txt"
flow_parameter._debug_level = "info"
flow_parameter.param_name = "volume_id"
flow_parameter._stream_id = "99"
flow_parameter.wrap_stream = "false"
flow_parameter._ignore_errors = "false"

flow_parameter_2.default_value = "https://drive.google.com/file/d/0BzJcr8ESI19Jby1pdlBYbktLRUU/view?usp=sharing"
flow_parameter_2._debug_level = "info"
flow_parameter_2.param_name = "replacement_rules_url"
flow_parameter_2._stream_id = "99"
flow_parameter_2.wrap_stream = "false"
flow_parameter_2._ignore_errors = "false"

token_counts_to_csv.ordered = "false"
token_counts_to_csv._debug_level = "info"
token_counts_to_csv._ignore_errors = "false"
token_counts_to_csv.header = "tokens,counts"

flow_parameter_3.default_value = "https://drive.google.com/file/d/0BzJcr8ESI19JMXY5bVkxeWFteHc/view?usp=sharing"
flow_parameter_3._debug_level = "info"
flow_parameter_3.param_name = "stopwords_list_english_url"
flow_parameter_3._stream_id = "99"
flow_parameter_3._ignore_errors = "false"
flow_parameter_3.wrap_stream = "false"

opennlp_tokenizer_2.tokenizer_type = "simple"
opennlp_tokenizer_2._debug_level = "info"
opennlp_tokenizer_2._ignore_errors = "false"

write_to_file_3._debug_level = "info"
write_to_file_3.append_timestamp = "false"
write_to_file_3.append_data_to_file = "false"
write_to_file_3._ignore_errors = "false"
write_to_file_3.default_folder = "/tmp"

#
# Create the flow by connecting the components
#
@flow_parameter_3_outputs = flow_parameter_3()
@flow_parameter_2_outputs = flow_parameter_2()
@random_sample_outputs = random_sample()
@fork_x2_outputs = fork_x2()
@universal_text_extractor_2_outputs = universal_text_extractor_2()
@stream_delimiter_filter_outputs = stream_delimiter_filter()
@strings_to_java_string_outputs = strings_to_java_string()
@to_lowercase_outputs = to_lowercase()
@universal_text_extractor_3_outputs = universal_text_extractor_3()
@read_text_outputs = read_text()
@token_counter_reducer_outputs = token_counter_reducer()
@trigger_message_outputs = trigger_message()
@htrc_page_retriever_outputs = htrc_page_retriever()
@text_replacement_outputs = text_replacement()
@tuple_value_to_string_outputs = tuple_value_to_string()
@opennlp_tokenizer_2_outputs = opennlp_tokenizer_2()
@opennlp_tokenizer_outputs = opennlp_tokenizer() [+AUTO!]
@text_accumulator_outputs = text_accumulator()
@csv_to_tuple_outputs = csv_to_tuple()
@push_text_outputs = push_text()
@flow_parameter_outputs = flow_parameter()
@token_counts_to_csv_outputs = token_counts_to_csv()
@push_text_2_outputs = push_text_2()
@push_text_3_outputs = push_text_3()
@stream_delimiter_filter_2_outputs = stream_delimiter_filter_2()
@tag_cloud_outputs = tag_cloud()
@token_filter_outputs = token_filter()
@text_cleaner_outputs = text_cleaner()
@text_cleaner_2_outputs = text_cleaner_2() [+AUTO!]
@token_counter_outputs = token_counter() [+AUTO!]
@concatenate_text_outputs = concatenate_text()
@top_n_filter_outputs = top_n_filter()
@search_text_outputs = search_text()

write_to_file_3(
	location: push_text_3_outputs.text;
	data: token_counts_to_csv_outputs.text
)
write_to_file_2(
	location: push_text_2_outputs.text;
	data: tag_cloud_outputs.html
)
random_sample(text: strings_to_java_string_outputs.java_string)
fork_x2(object: top_n_filter_outputs.token_counts)
universal_text_extractor_2(location: flow_parameter_2_outputs.text)
stream_delimiter_filter(object: text_accumulator_outputs.text)
strings_to_java_string(text: tuple_value_to_string_outputs.text)
universal_text_extractor_3(location: flow_parameter_3_outputs.text)
to_lowercase(text: stream_delimiter_filter_outputs.object)
read_text(location: flow_parameter_outputs.text)
token_counter_reducer(token_counts: token_filter_outputs.token_counts)
trigger_message(
	object: universal_text_extractor_2_outputs.text;
	trigger: to_lowercase_outputs.text
)
htrc_page_retriever(volume_id_list: search_text_outputs.text_found)
text_replacement(
	mapData: trigger_message_outputs.object;
	text: trigger_message_outputs.trigger
)
tuple_value_to_string(
	meta_tuple: csv_to_tuple_outputs.meta_tuple;
	tuples: csv_to_tuple_outputs.tuples
)
opennlp_tokenizer_2(text: concatenate_text_outputs.text)
opennlp_tokenizer(text: text_replacement_outputs.text)
text_accumulator(text: text_cleaner_2_outputs.text)
csv_to_tuple(text: read_text_outputs.text)
token_counts_to_csv(token_counts: fork_x2_outputs.object2)
stream_delimiter_filter_2(object: token_counter_reducer_outputs.token_counts)
tag_cloud(token_counts: fork_x2_outputs.object)
token_filter(
	token_counts: token_counter_outputs.token_counts;
	tokens_blacklist: opennlp_tokenizer_2_outputs.tokens
)
text_cleaner(text: random_sample_outputs.text)
text_cleaner_2(text: htrc_page_retriever_outputs.text)
token_counter(tokens: opennlp_tokenizer_outputs.tokens)
concatenate_text(
	text2: push_text_outputs.text;
	text: universal_text_extractor_3_outputs.text
)
top_n_filter(token_counts: stream_delimiter_filter_2_outputs.object)
search_text(text: text_cleaner_outputs.text)

